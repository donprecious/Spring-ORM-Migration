package com.orm.cli;

import com.orm.migration.MigrationScript;
import com.orm.spring.MigrationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class MigrationCliTest {

    @Mock
    private MigrationService migrationService;

    private MigrationCli cli;
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @BeforeEach
    void setUp() {
        cli = new MigrationCli(migrationService);
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @org.junit.jupiter.api.AfterEach
    void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    void shouldGenerateMigration() {
        // Arrange
        MigrationScript script = new MigrationScript(
            "V1__test_migration.sql",
            "CREATE TABLE test;",
            null,
            "test migration",
            LocalDateTime.now()
        );
        when(migrationService.generateMigration(anyString())).thenReturn(script);

        // Act
        cli.run("migrate", "generate", "-d", "test migration");

        // Assert
        verify(migrationService).generateMigration("test migration");
        assertEquals(0, cli.getExitCode());
        assertTrue(outContent.toString().contains("Generated migration"));
        assertTrue(outContent.toString().contains(script.getFileName()));
    }

    @Test
    void shouldShowVerboseOutput() {
        // Arrange
        MigrationScript script = new MigrationScript(
            "V1__test_migration.sql",
            "CREATE TABLE test;",
            null,
            "test migration",
            LocalDateTime.now()
        );
        when(migrationService.generateMigration(anyString())).thenReturn(script);

        // Act
        cli.run("migrate", "generate", "-d", "test migration", "-v");

        // Assert
        assertTrue(outContent.toString().contains("[DEBUG]"));
        assertTrue(outContent.toString().contains("Migration content:"));
        assertTrue(outContent.toString().contains("CREATE TABLE test;"));
    }

    @Test
    void shouldHandleGenerationFailure() {
        // Arrange
        when(migrationService.generateMigration(anyString()))
            .thenThrow(new RuntimeException("Test error"));

        // Act
        cli.run("migrate", "generate", "-d", "test migration");

        // Assert
        assertEquals(1, cli.getExitCode());
        assertTrue(errContent.toString().contains("Failed to generate migration"));
    }

    @Test
    void shouldApplyMigrations() {
        // Arrange
        when(migrationService.applyPendingMigrations()).thenReturn(2);

        // Act
        cli.run("migrate", "apply");

        // Assert
        verify(migrationService).applyPendingMigrations();
        assertEquals(0, cli.getExitCode());
        assertTrue(outContent.toString().contains("Successfully applied 2 migration(s)"));
    }

    @Test
    void shouldShowNoMigrationsToApply() {
        // Arrange
        when(migrationService.applyPendingMigrations()).thenReturn(0);

        // Act
        cli.run("migrate", "apply");

        // Assert
        assertEquals(0, cli.getExitCode());
        assertTrue(outContent.toString().contains("No migrations to apply"));
    }

    @Test
    void shouldHandleApplyFailure() {
        // Arrange
        when(migrationService.applyPendingMigrations())
            .thenThrow(new RuntimeException("Test error"));

        // Act
        cli.run("migrate", "apply");

        // Assert
        assertEquals(1, cli.getExitCode());
        assertTrue(errContent.toString().contains("Failed to apply migrations"));
    }

    @Test
    void shouldShowStatus() {
        // Arrange
        when(migrationService.validateSchema()).thenReturn(true);

        // Act
        cli.run("migrate", "status");

        // Assert
        verify(migrationService).validateSchema();
        assertEquals(0, cli.getExitCode());
        assertTrue(outContent.toString().contains("Schema is up to date"));
    }

    @Test
    void shouldValidateSchema() {
        // Arrange
        when(migrationService.validateSchema()).thenReturn(true);

        // Act
        cli.run("migrate", "validate");

        // Assert
        verify(migrationService).validateSchema();
        assertEquals(0, cli.getExitCode());
        assertTrue(outContent.toString().contains("Schema validation successful"));
    }

    @Test
    void shouldHandleValidationFailure() {
        // Arrange
        when(migrationService.validateSchema()).thenReturn(false);

        // Act
        cli.run("migrate", "validate");

        // Assert
        assertEquals(1, cli.getExitCode());
        assertTrue(outContent.toString().contains("Schema validation failed"));
    }

    @Test
    void shouldHandleInvalidCommand() {
        // Act
        cli.run("migrate", "invalid-command");

        // Assert
        assertEquals(2, cli.getExitCode()); // picocli returns 2 for usage errors
    }

    @Test
    void shouldRequireDescriptionForGenerate() {
        // Act
        cli.run("migrate", "generate");

        // Assert
        assertEquals(2, cli.getExitCode());
        verify(migrationService, never()).generateMigration(anyString());
    }

    @Test
    void shouldShowStackTraceInVerboseMode() {
        // Arrange
        when(migrationService.validateSchema())
            .thenThrow(new RuntimeException("Test error"));

        // Act
        cli.run("migrate", "validate", "-v");

        // Assert
        assertTrue(errContent.toString().contains("java.lang.RuntimeException"));
        assertTrue(errContent.toString().contains("Test error"));
    }

    @Test
    void shouldShowPendingMigrationsInDryRun() {
        // Arrange
        List<MigrationScript> pendingMigrations = Arrays.asList(
            new MigrationScript(
                "V1__first_migration.sql",
                "CREATE TABLE users;",
                null,
                "Create users table",
                LocalDateTime.now()
            ),
            new MigrationScript(
                "V2__second_migration.sql",
                "ALTER TABLE users ADD COLUMN email VARCHAR(255);",
                null,
                "Add email column",
                LocalDateTime.now()
            )
        );
        when(migrationService.previewPendingMigrations()).thenReturn(pendingMigrations);

        // Act
        cli.run("migrate", "apply", "--dry-run");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("Dry run mode"));
        assertTrue(output.contains("V1__first_migration.sql"));
        assertTrue(output.contains("V2__second_migration.sql"));
        assertTrue(output.contains("Total migrations to be applied: 2"));
        verify(migrationService, never()).applyPendingMigrations();
    }

    @Test
    void shouldShowSqlInVerboseDryRun() {
        // Arrange
        MigrationScript script = new MigrationScript(
            "V1__test_migration.sql",
            "CREATE TABLE users;\nALTER TABLE users ADD COLUMN email VARCHAR(255);",
            null,
            "Create users table",
            LocalDateTime.now()
        );
        when(migrationService.previewPendingMigrations()).thenReturn(Collections.singletonList(script));

        // Act
        cli.run("migrate", "apply", "--dry-run", "--verbose");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("SQL to be executed"));
        assertTrue(output.contains("CREATE TABLE users"));
        assertTrue(output.contains("ALTER TABLE users"));
    }

    @Test
    void shouldHandleEmptyPendingMigrationsInDryRun() {
        // Arrange
        when(migrationService.previewPendingMigrations()).thenReturn(Collections.emptyList());

        // Act
        cli.run("migrate", "apply", "--dry-run");

        // Assert
        assertTrue(outContent.toString().contains("No pending migrations to apply"));
        verify(migrationService, never()).applyPendingMigrations();
    }

    @Test
    void shouldSaveOutputToFile() throws IOException {
        // Arrange
        MigrationScript script = new MigrationScript(
            "V1__test_migration.sql",
            "CREATE TABLE users;",
            null,
            "Create users table",
            LocalDateTime.now()
        );
        when(migrationService.previewPendingMigrations()).thenReturn(Collections.singletonList(script));
        Path tempFile = Files.createTempFile("migration-preview", ".txt");

        // Act
        cli.run("migrate", "apply", "--dry-run", "--output", tempFile.toString());

        // Assert
        String fileContent = Files.readString(tempFile);
        assertTrue(fileContent.contains("Dry run mode"));
        assertTrue(fileContent.contains("V1__test_migration.sql"));
        Files.delete(tempFile);
    }

    @Test
    void shouldProceedWithMigrationAfterDryRun() {
        // This test simulates console input, but since System.console() returns null in tests,
        // it will skip the confirmation and proceed directly
        // Arrange
        List<MigrationScript> pendingMigrations = Collections.singletonList(
            new MigrationScript(
                "V1__test_migration.sql",
                "CREATE TABLE users;",
                null,
                "Create users table",
                LocalDateTime.now()
            )
        );
        when(migrationService.previewPendingMigrations()).thenReturn(pendingMigrations);
        when(migrationService.applyPendingMigrations()).thenReturn(1);

        // Act
        cli.run("migrate", "apply", "--dry-run", "--yes");

        // Assert
        verify(migrationService, never()).applyPendingMigrations();
    }

    @Test
    void shouldSkipConfirmationWithYesFlag() {
        // Arrange
        List<MigrationScript> pendingMigrations = Collections.singletonList(
            new MigrationScript(
                "V1__test_migration.sql",
                "CREATE TABLE users;",
                null,
                "Create users table",
                LocalDateTime.now()
            )
        );
        when(migrationService.previewPendingMigrations()).thenReturn(pendingMigrations);
        when(migrationService.applyPendingMigrations()).thenReturn(1);

        // Act
        cli.run("migrate", "apply", "--yes");

        // Assert
        verify(migrationService).applyPendingMigrations();
        assertTrue(outContent.toString().contains("Successfully applied 1 migration(s)"));
    }

    @Test
    void shouldWarnWhenAppliedCountDiffersFromExpected() {
        // Arrange
        List<MigrationScript> pendingMigrations = Arrays.asList(
            new MigrationScript(
                "V1__first_migration.sql",
                "CREATE TABLE users;",
                null,
                "Create users table",
                LocalDateTime.now()
            ),
            new MigrationScript(
                "V2__second_migration.sql",
                "ALTER TABLE users ADD COLUMN email;",
                null,
                "Add email column",
                LocalDateTime.now()
            )
        );
        when(migrationService.previewPendingMigrations()).thenReturn(pendingMigrations);
        when(migrationService.applyPendingMigrations()).thenReturn(1); // Only one applied

        // Act
        cli.run("migrate", "apply", "--yes");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("Warning: Expected to apply 2 migrations but applied 1"));
    }

    @Test
    void shouldShowMigrationHistory() {
        // Arrange
        List<MigrationScript> history = Arrays.asList(
            new MigrationScript(
                "V1__first_migration.sql",
                "CREATE TABLE users;",
                "DROP TABLE users;",
                "Create users table",
                LocalDateTime.now().minusDays(1)
            ),
            new MigrationScript(
                "V2__second_migration.sql",
                "ALTER TABLE users ADD COLUMN email;",
                "ALTER TABLE users DROP COLUMN email;",
                "Add email column",
                LocalDateTime.now()
            )
        );
        when(migrationService.getMigrationHistory(null)).thenReturn(history);

        // Act
        cli.run("migrate", "history");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("Migration History:"));
        assertTrue(output.contains("V1__first_migration.sql"));
        assertTrue(output.contains("V2__second_migration.sql"));
        assertTrue(output.contains("Create users table"));
        assertTrue(output.contains("Add email column"));
    }

    @Test
    void shouldShowVerboseMigrationHistory() {
        // Arrange
        MigrationScript script = new MigrationScript(
            "V1__test_migration.sql",
            "CREATE TABLE users;",
            "DROP TABLE users;",
            "Create users table",
            LocalDateTime.now()
        );
        when(migrationService.getMigrationHistory(null)).thenReturn(Collections.singletonList(script));

        // Act
        cli.run("migrate", "history", "--verbose");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("Up SQL:"));
        assertTrue(output.contains("CREATE TABLE users;"));
        assertTrue(output.contains("Down SQL:"));
        assertTrue(output.contains("DROP TABLE users;"));
    }

    @Test
    void shouldLimitMigrationHistory() {
        // Arrange
        when(migrationService.getMigrationHistory(2)).thenReturn(Arrays.asList(
            new MigrationScript("V1__first.sql", "SQL1", "DOWN1", "First", LocalDateTime.now()),
            new MigrationScript("V2__second.sql", "SQL2", "DOWN2", "Second", LocalDateTime.now())
        ));

        // Act
        cli.run("migrate", "history", "--limit", "2");

        // Assert
        verify(migrationService).getMigrationHistory(2);
    }

    @Test
    void shouldUndoLastMigration() {
        // Arrange
        MigrationScript lastMigration = new MigrationScript(
            "V2__test_migration.sql",
            "CREATE TABLE test;",
            "DROP TABLE test;",
            "Create test table",
            LocalDateTime.now()
        );
        when(migrationService.getLastAppliedMigration()).thenReturn(lastMigration);

        // Act
        cli.run("migrate", "undo", "--yes");

        // Assert
        verify(migrationService).undoLastMigration();
        assertTrue(outContent.toString().contains("Successfully undone migration"));
    }

    @Test
    void shouldShowConfirmationForUndo() {
        // Arrange
        MigrationScript lastMigration = new MigrationScript(
            "V2__test_migration.sql",
            "CREATE TABLE test;",
            "DROP TABLE test;",
            "Create test table",
            LocalDateTime.now()
        );
        when(migrationService.getLastAppliedMigration()).thenReturn(lastMigration);

        // Act
        cli.run("migrate", "undo");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("This operation is destructive"));
        verify(migrationService, never()).undoLastMigration();
    }

    @Test
    void shouldRevertToVersion() {
        // Arrange
        List<MigrationScript> migrationsToRevert = Arrays.asList(
            new MigrationScript("V3__third.sql", "SQL3", "DOWN3", "Third", LocalDateTime.now()),
            new MigrationScript("V2__second.sql", "SQL2", "DOWN2", "Second", LocalDateTime.now())
        );
        when(migrationService.getMigrationsToRevert("V1")).thenReturn(migrationsToRevert);

        // Act
        cli.run("migrate", "revert", "V1", "--yes");

        // Assert
        verify(migrationService).revertToVersion("V1");
        assertTrue(outContent.toString().contains("Successfully reverted to version"));
    }

    @Test
    void shouldShowConfirmationForRevert() {
        // Arrange
        List<MigrationScript> migrationsToRevert = Arrays.asList(
            new MigrationScript("V3__third.sql", "SQL3", "DOWN3", "Third", LocalDateTime.now()),
            new MigrationScript("V2__second.sql", "SQL2", "DOWN2", "Second", LocalDateTime.now())
        );
        when(migrationService.getMigrationsToRevert("V1")).thenReturn(migrationsToRevert);

        // Act
        cli.run("migrate", "revert", "V1");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("This operation is destructive"));
        assertTrue(output.contains("2 migrations will be reverted"));
        verify(migrationService, never()).revertToVersion(anyString());
    }

    @Test
    void shouldShowProgressIndicator() throws InterruptedException {
        // Arrange
        when(migrationService.applyPendingMigrations()).thenAnswer(invocation -> {
            Thread.sleep(500); // Simulate long-running operation
            return 1;
        });

        // Act
        cli.run("migrate", "apply", "--yes");

        // Assert
        String output = outContent.toString();
        assertTrue(output.contains("Successfully applied"));
    }

    @Test
    void shouldHandleNoMigrationsToUndo() {
        // Arrange
        when(migrationService.getLastAppliedMigration()).thenReturn(null);

        // Act
        cli.run("migrate", "undo");

        // Assert
        assertTrue(outContent.toString().contains("No migrations to undo"));
        verify(migrationService, never()).undoLastMigration();
    }

    @Test
    void shouldHandleNoMigrationsToRevert() {
        // Arrange
        when(migrationService.getMigrationsToRevert(anyString())).thenReturn(Collections.emptyList());

        // Act
        cli.run("migrate", "revert", "V1");

        // Assert
        assertTrue(outContent.toString().contains("No migrations to revert"));
        verify(migrationService, never()).revertToVersion(anyString());
    }
} 